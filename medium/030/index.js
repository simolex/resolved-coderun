/**
 * 30. Буратино
 *
 * Папа Карло сменил работу: теперь он работает в мастерской, и целый рабочий день занимается тем, что забивает
 * гвоздики. Чтобы ему было не скучно, у него в мастерской стоит постоянно работающий телевизор. К сожалению,
 * производительность папы Карло напрямую зависит от его настроения, а оно, в свою очередь, — от того,
 * что в данный момент показывают по телевизору. Правда, пока папа Карло забивает гвоздик, он не обращает
 * ни малейшего внимания на телевизор, и поэтому скорость его работы зависит только от того, что показывали
 * по телевизору в тот момент, когда он только начал забивать этот гвоздик. Забив очередной гвоздик,
 * он обязательно мельком смотрит в телевизор (его настроение, естественно, меняется), и после этого может либо
 * сразу начать забивать следующий гвоздик, либо отдохнуть несколько секунд или даже минут за просмотром
 * телевизора.
 * Папа Карло начинает работу ровно в 9 часов. С 13 часов у него начинается обеденный перерыв. При этом если
 * он незадолго до обеда хочет начать вбивать гвоздик, но понимает, что до перерыва он не закончит эту работу,
 * то он и не начинает ее. Аналогично в 14 часов он вновь приступает к работе, а в 18 уходит домой. Это значит,
 * что в 9:00:00 (аналогично, как и в 14:00:00) он уже может начать забивать гвоздик. Если он хочет начать
 * вбивать гвоздик в 12:59:59 или 17:59:59 и на это у него уйдет 1 секунда, то он успевает вбить гвоздик до
 * обеда или до окончания работы соответственно, а если 2 секунды, — то уже нет.
 * Известна программа телевизионных передач и то, как они влияют на папу Карло. Требуется составить график
 * работы и маленьких перерывчиков папы Карло так, чтобы за рабочий день он вбил максимально возможное
 * количество гвоздей.
 *
 * Формат ввода:
 * Во входном файле записано расписание телевизионных передач с 9:00:00 до 18:00:00 в следующем формате.
 * В первой строке число N — количество телевизионных передач в этот период (1 ≤ N ≤ 32400).
 * В каждой из последующих N строк записано описание одной передачи: сначала время ее начала
 * в формате ЧЧ:ММ:СС (ЧЧ — две цифры, задающие часы, ММ — две цифры, задающие минуты начала,
 * СС — две цифры, задающие секунды начала). А затем через один или несколько пробелов число Ti — время
 * в секундах, которое папа Карло будет тратить на забивание одного гвоздика, если он перед этим увидит
 * по телевизору эту передачу (1 ≤ Ti ≤ 32400).Передачи записаны в хронологическом порядке. Первая передача
 * всегда начинается в 09:00:00. Можно считать, что последняя передача заканчивается в 18:00:00.
 *
 * Формат вывода:
 * В первую строку выходного файла требуется вывести максимальное количество гвоздиков, которое папа
 * Карло успеет вбить за рабочий день.
 *
 * Примечания:
 * В первом примере каждый час папа Карло вбивает по одному гвоздику
 * Во втором примере первую половину дня он вбивает по гвоздику за полчаса, но в 12:30:00
 * он не начинает вбивать гвоздики, а ждет 12:59:31 и успевает до обеда вбить 2 гвоздика.
 * С 14 до 15 часов вбиваются 2 гвоздя, а затем по одному гвоздю в час.
 */

function pappaKarlo(sequence) {
    const n = sequence.length;
    const dp = new Int16Array(n);
    const cert = new Int16Array(n);
    const result = [];

    dp[0] = 1;
    cert[0] = -1;

    let tailIndex = 0;

    for (let i = 1; i < n; i++) {
        dp[i] = 0;
        for (let j = 0; j < i; j++) {
            if (sequence[j] < sequence[i] && dp[i] < dp[j] + 1) {
                dp[i] = dp[j] + 1;
                cert[i] = j;
            }
        }
        if (dp[i] === 0) {
            dp[i] = 1;
            cert[i] = -1;
        }
        if (dp[tailIndex] < dp[i]) {
            tailIndex = i;
        }
    }

    return 0;
}

const _readline = require("readline");

const _reader = _readline.createInterface({
    input: process.stdin
});

const _inputLines = [];
let _curLine = 0;

_reader.on("line", (line) => {
    _inputLines.push(line);
});

process.stdin.on("end", solve);

function solve() {
    const n = readInt();
    const telecasts = [];

    for (let i = 0; i < n; i++) {
        const telecast = readStringArray();
        telecast[1] = Number(telecast[1]);
        telecasts.push(telecast);
    }

    const result = pappaKarlo(telecasts);

    console.log(result);
}

function readAllString() {
    var arr = _inputLines.map((line) => line.trim());

    return arr;
}

function readString() {
    var str = _inputLines[_curLine].trim(" ");
    _curLine++;
    return str;
}

function readInt() {
    const n = Number(_inputLines[_curLine]);
    _curLine++;
    return n;
}
function readBigInt() {
    const n = BigInt(_inputLines[_curLine]);
    _curLine++;
    return n;
}

function readArray() {
    var arr = _inputLines[_curLine]
        .trim(" ")
        .split(" ")
        .filter((str) => str && str.length > 0)
        .map((num) => Number(num));
    _curLine++;
    return arr;
}

function readBigIntArray() {
    var arr = _inputLines[_curLine]
        .trim(" ")
        .split(" ")
        .map((num) => BigInt(num));
    _curLine++;
    return arr;
}

function readStringArray() {
    var arr = _inputLines[_curLine]
        .trim(" ")
        .split(" ")
        .filter((str) => str && str.length > 0);
    _curLine++;
    return arr;
}

function readEdges(n) {
    let grid = [];
    for (let i = 0; i < n; i++) {
        let vertex = readArray();
        grid.push(vertex);
    }
    return grid;
}

module.exports = pappaKarlo;
